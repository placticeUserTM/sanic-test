upstream backend {
    keepalive 100;
    server app:8000;
    #server unix:/tmp/sanic.sock;
}

server {
    listen 80;
	server_name test-sanic-app.tk;
    return 301 https://test-sanic-app.tk$request_uri;
}

server {
    server_name test-sanic-app.tk;
    listen 443 ssl http2 default_server;
    # listen [::]:443 ssl http2 default_server;
    ssl_certificate /path/to/server.crt;
    ssl_certificate_key /path/to/server.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    proxy_ssl_verify off;

    client_max_body_size 500M;

    proxy_set_header Host               $host;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_set_header X-Forwarded-Host   $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Real-IP          $remote_addr;

    location / {
        proxy_pass http://backend/;
        # Allow fast streaming HTTP/1.1 pipes (keep-alive, unbuffered)
        proxy_http_version 1.1;
        proxy_request_buffering off;
        proxy_buffering off;
        # Proxy forwarding (password configured in app.config.FORWARDED_SECRET)
        proxy_set_header forwarded "proxy_forwarded;secret=\"YOUR SECRET\"";
        proxy_redirect off;
        # Allow websockets
        proxy_set_header connection "upgrade";
        proxy_set_header upgrade $http_upgrade;
    }
}